_QFT_ ← {
     ⍝ Quantum Fourier Transform
     ⍝ Takes a vector state of an n-qubit system
     ⍝ Returns the n-qubit quantum fourier transform for the vector state
     ⍝ Uses the product representation of the Quantum Fourier Transform
     ⍝
     ⍝ ⍵: Vector state to be transformed

     stage ← #.quapl.circuit.stage
     H ← #.quapl.gates.H
     swap ← #.quapl.gates.SWAP
     
     ⍝ Rotation in z multiplied by phase factor to match literature
     Rz2 ← {(*0J1×⍵÷2) × #.quapl.gates.Rz ⍵}
     
     ⍝ Rotation in z by 2 Pi / 2 ^ ⍵
     Rzn ← {Rz2 ○2÷2*⍵}

     ⍝ Controlled form of above rotation
     CRzn ← 1 #.quapl.gates.gCTR Rzn

     n_qubits ← 2⍟1⌷⍴⍵

     ⍝ Create part of circuit that affects qubit ⍵
     ⍝ Applies the Hadamard gate then rotates qubit about z
     ⍝ Indices on left-hand side are reduced by 1, since qubit numbering starts from 0
     lane ← {((⍵-1),((⍵-1)+⍳n_qubits-⍵),¨(⍵-1))((⊂H), CRzn¨ 1+⍳n_qubits-⍵)}

     

     ⍝ Successively apply the gates of a circuit
     stage_all ← {
         ids gts ← ⍺
          
         id ← 1↑ids
         ids ← 1↓ids
          
         gate ← 1↑gts
         gts ← 1↓gts
         
         ret ← ((⊃id)(gate)) stage ⍵ 
         
         (⍴ids)=0: ret
         (ids gts) ∇ ret
     }

     ⍝ Apply the above circuit to qubits from 1 to n_qubits successively
     apply ← {
         x ← 1↑⍺
         a ← 1↓⍺
         
         ret ← (lane x) stage_all ⍵
         (⍴a)=0: ret
         a ∇ ret
     }

     ⍝ Result before swapping
     intermediate ← (⍳n_qubits) apply ⍵

     ⍝ Circuit to swap qubits
     ⍝ Indices on left-hand side are reduced by 1, since qubit numbering starts from 0
     swap_circuit ← (1-⍨(⌊n_qubits÷2)↑(⌽⍳n_qubits),¨⍳n_qubits)({swap}¨⍳⌊n_qubits÷2)
     
     ⍝ Check if swap circuit is non-empty
     (0=⍴1⌷↑swap_circuit): intermediate

     swap_circuit stage_all intermediate
}