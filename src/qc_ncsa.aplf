⍝ Santiago Nunez-Corrales (nunezco2@illinois.edu)
⍝ National Center for Supercomputing Applications
⍝ University of Illinois Urbana-Champaign

⍝ The namespace `quapl` provides all required definitions to implement a
⍝ mathematica simulation of a quantum computing device.

:Namespace quapl
    
    ⍝ Single qubit manipulations
    :Namespace sng
        ⍝ Ground state |0>
        q0 ← 2 1 ⍴ 1 0

        ⍝ Excited state |1>
        q1 ← 2 1 ⍴ 0 1

        ⍝ Linear superposition of amplitudes
        qx ← { #.quapl.mlt.normalize +/(q0 q1) ×.+ ⍵ }

        ⍝ Bloch state
        bloch ← { (2 ○ (⍵÷2)), (*(0J1×⍺))×(1 ○ (⍵÷2)) }

        ⍝ Projection operator to 0
        P0 ← 2 2 ⍴ 1 0 0 0

        ⍝ Projection operator to 1
        P1 ← 2 2 ⍴ 0 0 0 1

    :EndNamespace

    ⍝ Multiqubit manipulations
    :Namespace mlt

        ⍝ Normalize a quantum state
        normalize ← {⍵÷0.5*⍨(dagger+.×⊢)⍵}

        ⍝ Test that we have a valid qubit
        valid ← {
            ((⍴⍵)[1]=1)∧(⊃(2⍟(⍴⍵)[2])=⌈2⍟(⍴⍵)[2]): 1    ⍝ We have a bra
            ((⍴⍵)[2]=1)∧(⊃(2⍟(⍴⍵)[1])=⌈2⍟(⍴⍵)[1]): 1    ⍝ We have a ket
            ⍝ 0                                         ⍝ Not a qubit
        }

        ⍝ Kronecker product
        kpr ← ⊃ (,/ (⍪⌿ (⊂[3 4] ∘.×)))

        ⍝ Dagger operator
        dagger ← { ⍉+⍵ }

        ⍝ Transform to ket
        ket ← {
            (⍴⍵)[2]=1: ⍵   ⍝ return same object if ket is column vector
            dagger ⍵         ⍝ else return transposed conjugate
        }

        ⍝ Transform to bra
        bra ← {
            (⍴⍵)[1]=1: ⍵   ⍝ return same object if bra is row vector
            dagger ⍵         ⍝ else return transposed conjugate
        }

    :EndNamespace
    
    ⍝ Quantum gates
    :Namespace gates

        ⍝ Identity - nop
        I ← 2 2 ⍴ 1 0 0 1

        ⍝ Global phase
        G ← {I×*0J1×⍵}

        ⍝ X (not)
        X ← 2 2 ⍴ 0 1 1 0

        ⍝ Y
        Y ← 2 2 ⍴ 0 0J¯1 0J1 0

        ⍝ Z (phase flip)
        Z ← 2 2 ⍴ 1 0 0 ¯1

        ⍝ S (√Z)
        S ← 2 2 ⍴ 1 0 0 0J1

        ⍝ V (√X)
        V ← (÷2)×(2 2 ⍴ 1J1 1J¯1 1J¯1 1J1)

        ⍝ H (Hadamard-Walsh)
        H ← (÷2*0.5)×(2 2 ⍴ 1 1 1 ¯1)

        ⍝ P (phase shift)
        P ← {2 2 ⍴ ((1 0 0),(*(0J1×⍵)))}

        ⍝ T (4-th root of Z)
        T ← 2 2 ⍴ ((1 0 0),(*(0J1×(0.25×○1))))

        ⍝ Rx (rotation in x)
        Rx ← {2 2 ⍴ ((2○⍵÷2),(0J¯1×(1○⍵÷2)),(0J¯1×(1○⍵÷2)),(2○⍵÷2))}

        ⍝ Ry (rotation in y)
        Ry ← {2 2 ⍴ ((2○⍵÷2),(¯1×(1○⍵÷2)),(1○⍵÷2),(2○⍵÷2))}

        ⍝ Rz (rotation in z)
        Rz ← {2 2 ⍴ ((*¯0J1×(⍵÷2)),0,0,(*0J1×(⍵÷2)))}

        ⍝ U (generalized rotation)
        U ← { 2 2 ⍴ (2○(⍵[1]÷2)) (-(*0J¯1×⍵[3])×(1○(⍵[1]÷2))) ((*0J¯1×⍵[2])×(1○(⍵[1]÷2))) ((*0J1×(⍵[2] + ⍵[3]))×(2○(⍵[1]÷2)))}

        ⍝ CX (CNOT)
        CNOT ← 4 4 ⍴ 1 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0

        ⍝ XNOR
        XNOR ← 4 4 ⍴ 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 1

        ⍝ CY
        CY ← 4 4 ⍴ 1 0 0 0 0 1 0 0 0 0 0 0J¯1 0 0 0J1 

        ⍝ CZ
        CZ ← 4 4 ⍴ 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 ¯1

        ⍝ CP (controlled phase)
        CP ← { 4 4 ⍴ 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 (*0J1×⍵) }

        ⍝ CS (controlled phase S)
        CS ← { 4 4 ⍴ 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0J1 }

        ⍝ XX (XX interaction)
        XX ← { 4 4 ⍴ (2○(⍵÷2)) 0 0 (0J¯1×(1○(⍵÷2))) 0 (2○(⍵÷2)) (0J¯1×(1○(⍵÷2))) 0 0 (0J¯1×(1○(⍵÷2))) (2○(⍵÷2)) 0 (0J¯1×(1○(⍵÷2))) 0 0 (2○(⍵÷2))}

        ⍝ YY (YY interaction)
        YY ← { 4 4 ⍴ (2○(⍵÷2)) 0 0 (0J1×(1○(⍵÷2))) 0 (2○(⍵÷2)) (0J¯1×(1○(⍵÷2))) 0 0 (0J¯1×(1○(⍵÷2))) (2○(⍵÷2)) 0 (0J1×(1○(⍵÷2))) 0 0 (2○(⍵÷2))}

        ⍝ ZZ (ZZ interaction)
        ZZ ← {4 4 ⍴ (*(0J¯1×(⍵÷2))) 0 0 0 0 (*(0J1×(⍵÷2))) 0 0 0 0 (*(0J1×(⍵÷2))) 0 0 0 0 (*(0J¯1×(⍵÷2)))}

        ⍝ XY (XX + YY interaction)
        XY ← { 4 4 ⍴ 1 0 0 0 0 (2○(⍵÷2)) (0J¯1×(1○(⍵÷2))) 0 0 (0J¯1×(1○(⍵÷2))) (2○(⍵÷2)) 0 0 0 0 1}

        ⍝ DCNOT (double-controlled CNOT)
        DCNOT ← 4 4 ⍴ 1 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0
        
        ⍝ SWAP
        SWAP ← 4 4 ⍴ 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1

        ⍝ Imaginary SWAP
        iSWAP ← 4 4 ⍴ 1 0 0 0 0 0 0J1 0 0 0J1 0 0 0 0 0 1

        ⍝ Fermionic SWAP
        fSWAP ← 4 4 ⍴ 1 0 0 0 0 0 1 0 0 1 0 0 0 0 0 ¯1

        ⍝ Square root SWAP
        sqSWAP ← 4 4 ⍴ 1 0 0 0 0 ((1 + 0J1)×÷2) ((1 - 0J1)×÷2) 0 0 ((1 - 0J1)×÷2) ((1 + 0J1)×÷2) 0 0 0 1

        ⍝ Square root imaginary SWAP
        sqiSWAP ← 4 4 ⍴ 1 0 0 0 0 (1÷2*0.5) (0J1÷2*0.5) 0 0 (0J1÷2*0.5) (1÷2*0.5) 0 0 0 0 1

        ⍝ SWAP raised to the a-th power
        aSWAP ← { 4 4 ⍴ 1 0 0 0 0 (2÷⍨(1+(*0J1×○1×⍵))) (2÷⍨(1-(*0J1×○1×⍵))) 0 0 (2÷⍨(1-(*0J1×○1×⍵))) (2÷⍨(1+(*0J1×○1×⍵))) 0 0 0 0 1}

        ⍝ Fredkin (Controlled SWAP)
        FRK ← 8 8 ⍴ 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1

        ⍝ Toffoli (Doubly-controlled not)
        TOF ← 8 8 ⍴ 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0

    :EndNamespace

    ⍝ Measurement functions
    :Namespace measure
        ⍝ Rolls over a set of probabilities. ⍵ should be a vector where each element indicates the probability of the vector to be in that state
        ⍝ Returns the index of the roll
        roll ← {1++/(?0)>+\⍵}

        ⍝ Measures a vector space, returns the index of the state that was rolled. (the result will)
        measure ← {roll (⍉⍵*2)}

        ⍝ Measures a register.
        measure_reg ← {measure #.quapl.circuit.thread_reg ⍵}

        ⍝ Helper function used in measure_qubit. Splits an list of continuos numbers representing indeces between the ground and excited indeces.
        ⍝ First right argument should be the numbers of items in each state before it switches to the next state.
        ⍝    e.g.: for a 3 qubit vector state if measuring qubit 0, switch is 4, qubit 1 switch is 2 and qubit 3 switch is 1.
        ⍝ Second right argument Array of indices we want to split, should be a power of 2
        ⍝ Third and Fourth arguments are only necessary for recursion, should probably have a default of ⍬
        ⍝ Returns switch, empty array, the ground indeces and excited indices.
        _split ← {
            switch←⍵[1]
            indices←⊃⍵[2]
            ground←⊃⍵[3]
            excited←⊃⍵[4]
        
            ground←ground,(switch↑indices)
            indices←switch↓indices
            excited←excited,(switch↑indices)
            indices←switch↓indices
        
            (⍴indices)=0:switch indices ground excited
            ∇ switch indices ground excited
        }

        ⍝ Measures a specific qubit in a threaded register.
        ⍝ Returns the measured state of the qubit and the new vector state of the remaining normalized vector state of the other qubits.
        ⍝ ⍺ is the qubit I want to measure.
        ⍝ ⍵ is my threadeaded register.
        measure_qubit ← {
            n_basis←1↑⍴⍵
            n_qubits←2⍟n_basis
            a←⍺+1
        
            switch←⊃(n_basis÷(2*a))
            indices←⍳n_basis
            _ _ ground excited←_split((switch)(indices)(⍬)(⍬))
        
            vs←(⊂⍵[ground;]),(⊂⍵[excited;])
            ground_prob←+/(⍉⍵[ground;]*2)
            excited_prob←+/(⍉⍵[excited;]*2)
        
            meas_result←1++/(?0)>+\((⊃ground_prob),(⊃excited_prob))
            normed_vs←#.quapl.mlt.normalize(⊃vs[meas_result])
        
            (meas_result-1)(normed_vs)
        }

    :EndNamespace

    ⍝ Circuit assembly
    :Namespace circuit
        
        ⍝ New ground state register
        reg ← {(⍵ 1⍴(⍳⍵)-1),(⍵ 1⍴⊂#.quapl.sng.q0)}

        ⍝ Filter part of the register using qubit indices
        filter ← {
            ∧/(⍺ ∊ ⍵[;1])=0: ⍬    ⍝ No outcome when indices are incorrect
            (⍺+1)⌷⍨∘⊂⍨⍵         ⍝ Otherwise, perform a standard selection
        }

        ⍝ Thread a set of Hilbert space entities into a larger Hilbert space entity
        thread ← ⊃ { #.quapl.mlt.kpr/⍵ }

        ⍝ Thread a (filtered) register into a vector state
        thread_reg ← {
            ⊃ #.quapl.mlt.kpr/⍵[;2]
        }

        ⍝ Thread a gate set into a single operation
        thread_gate ← {
            ⊃ #.quapl.mlt.kpr/⍵
        }

        ⍝ Compute the permutation p required to re-assemble a circuit stage based on a register
        ⍝ Naïve implementation.
        ⍝ 
        ⍝ We benefit from the property relating permutations to binary represetations and how
        ⍝ it manifests into concrete permutations of qubits when re-arranging circuits, after
        ⍝ translation into a vector state.

        ⍝ Build a table with the full binary representation of (2^n, 1) indices of an C^n vector
        tnsidx ← {⍉(⍵ ⍴ 2) ⊤ ((2*⍵) ⍴ (⍳(2*⍵)) - 1)}

        ⍝ Map a qubit reordering into the tensor product row reordering
        qrdtotrd ← {1 + 2⊥⍉⍵⌷[2]⍨∘⊂⍨tnsidx ⍺}

        ⍝ Apply a stage to a current vector state representing n qubits, with the given gates and
        ⍝ a stated gate-dependent reordering (reordering a C^2 vector is less expensive than the gates)
        ⍝
        ⍝ ⍺: gate set
        ⍝ ⍺⍺: reordering for the gates
        ⍝ ⍵: the target vector state
        _Stage_ ← {
            size ← 1⌷⍴⍵
            
        }

        ⍝ Compute the permutation p required to re-assemble a circuit stage based on a register
        ⍝ Intelligent tensor decomposition implementation.

        ⍝ Unthread a vector state into a (filtered) register - TODO
        ⍝ This requires solving the Nearest Kronecker Product problem
        ⍝ References:
        ⍝ - Van Loan, C.F. and Pitsianis, N., 1993. Approximation with Kronecker products (pp. 293-314). 
        ⍝   Springer Netherlands.
        unthread_reg ← {

        }

    :EndNamespace
:EndNamespace